@using System.Collections.Generic;
@using System.Linq;
@using WebAppHosted.Client.Models;
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@page "/"

<div class="container">
    <div class="row justify-content-between">
        <div class="col-6">
            <h3>Notions (@notions.Count())</h3>
        </div>
    </div>
    <div class="row">
        <div class="table-responsive">
            <table class="table">
                <thead>
                    <tr>
                        <td>Text</td>
                        <td></td>
                    </tr>
                </thead>
                <tbody>
                @foreach (var notion in notions)
                {
                    <tr class="text-center">
                       <td class="align-middle py-1">
                            <input type="text" class="form-control" @bind="@notion.Title" @onfocusout="@(() => Save(notion))"/></td>
                       <td class="align-middle py-1">
                            <button type="button" class="btn btn-outline-danger oi oi-minus" @onclick="@(() => Remove(notion))"></button>
                       </td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>
    <div class="row">
        <div class="col-10">
            <input type="text" class="form-control" placeholder="Some notion" @bind="newNotion"/>
        </div>
        <div class="col-2">
            <button type="button" class="oi oi-plus" @onclick="@Add"></button>
        </div>
    </div>
</div>

@code {
    private List<Notion> notions = new List<Notion>();
    private string newNotion;

    protected override async Task OnInitializedAsync(){
        notions = (await localStorage.GetItemAsync<List<Notion>>("notions"))
            ?.ToList()
             ??  notions;
    }

    private async Task Add()
    {
        if(!string.IsNullOrWhiteSpace(newNotion))
        {
            var newTodoItem = new Notion { Title = newNotion };
            notions.Add(newTodoItem);
            await localStorage.SetItemAsync("notions", notions);

            newNotion = string.Empty;
        }
    }

    private async Task Remove(Notion todoToRemove)
    {
        notions.Remove(todoToRemove);
        await localStorage.SetItemAsync("notions", notions);
    }

    private async Task Save(Notion notion)
    {
        await localStorage.SetItemAsync("notions", notions);
    }
}